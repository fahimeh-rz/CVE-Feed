import argparse
import datetime
import sys
from configparser import ConfigParser
from datetime import time
import time
from requests.adapters import HTTPAdapter
from urllib3 import Retry
import requests
import re
import os
from os.path import isfile, join, exists
import zipfile
import json
import pymsteams


# send request and retry sending them in case of connection failure
def requests_retry_session(
        retries=20,
        backoff_factor=0.7,
        status_forcelist=(500, 502, 504),
        session=None,
):
    session = session or requests.Session()
    retry = Retry(
        total=retries,
        read=retries,
        connect=retries,
        backoff_factor=backoff_factor,
        status_forcelist=status_forcelist,
    )
    adapter = HTTPAdapter(max_retries=retry)
    session.mount('http://', adapter)
    session.mount('https://', adapter)
    return session


# calculate time from last time script has run
def calc_time(c_time):
    try:
        if (exists(default_directory + "log_timestamp.txt")):
            with open(default_directory + "log_timestamp.txt", 'r') as f:
                lines = f.read().splitlines()
                last_line = lines[-1]
                last_time = datetime.datetime.strptime(last_line, '%Y-%m-%d %H:%M')
                return (c_time - last_time)
        else:
            print("no log file found.. getting updates from yesterday till now...")
            return datetime.timedelta(days=1)
    except Exception as e:
        return datetime.timedelta(days=1)
        print(e)


# check if file is new by comparing hashes
def check_hash(new_hash):
    meta_text = ''
    if (exists(default_directory + "nvdcve-1.1-recent.meta")):
        if os.stat(default_directory + "nvdcve-1.1-recent.meta").st_size == 0:
            print("meta file is empty!")
            return 1
        else:
            with open(default_directory + "nvdcve-1.1-recent.meta", 'rb+') as f:
                meta_text = f.read()

                if (re.findall("sha256:\S+", str(meta_text)) != []):
                    old_hash = re.findall("sha256:\S+", str(meta_text))[0]
                    # print "old hash is : " + old_hash
                    if (new_hash != old_hash):
                        print("file is new!")
                        return 1
                    else:
                        print("you already have the latest feed!")
                        return 0
                else:
                    print("no hash detected in file..seems like file is corrupted..replacing with new file...")
                    return 1

                f.close()

    else:
        print("no hash file exists! new directory?!")
        return 1


# check for updates on file
def list_file():
    print("checking for updates...")
    t0 = time.time()
    try:
        r = requests_retry_session().get('https://nvd.nist.gov/vuln/data-feeds#JSON_FEED')
    except Exception as x:
        print('failed to check for updates! ')
    else:
        t1 = time.time()
        print('took {} seconds to check for updates'.format(t1 - t0))

    # get file metadata and pass for comparing
    for filename in re.findall('(nvdcve-1.1-[0-9]*recent.*)\" ', r.text):
        if (".meta" in filename):
            t0 = time.time()
            try:
                meta_file = requests_retry_session().get("https://nvd.nist.gov/feeds/json/cve/1.1/" + filename)
            except Exception as x:
                print('failed to get file metadata! ')
            else:
                t1 = time.time()
                print('took {} seconds to get file metadata.'.format(t1 - t0))

            new_hash = re.findall("sha256:\S+", meta_file.text)[0]
            # print "new hash is: " + new_hash
            return new_hash, filename

        else:
            continue


# write new meta file to keep hashes
def write_meta(base):
    meta_file = base + ".meta"
    t0 = time.time()
    try:
        r_meta = requests_retry_session().get("https://nvd.nist.gov/feeds/json/cve/1.1/" + meta_file, stream=True)
    except Exception as x:
        print('failed to download new metadata! ')
    else:
        t1 = time.time()
        print('took {} seconds to download new metadata.'.format(t1 - t0))

    with open(default_directory + meta_file, 'wb') as f:
        for chunk in r_meta:
            f.write(chunk)
    print("meta file updated successfully!")


# download new files
def download_file(filename):
    base = os.path.splitext(filename)[0]
    zip_file = base + '.json.zip'
    t0 = time.time()
    try:
        r_zip = requests_retry_session().get("https://nvd.nist.gov/feeds/json/cve/1.1/" + zip_file, stream=True)
    except Exception as x:
        print('failed to download new file! ')
    else:
        t1 = time.time()
        print('took {} seconds to download new file.'.format(t1 - t0))

    with open(default_directory + zip_file, 'wb') as f:
        for chunk in r_zip:
            f.write(chunk)
    print("download completed!")
    write_meta(base)


# analyzing downloaded zip file and extract high impact cves
def analyze_file():
    files = [f for f in os.listdir(default_directory) if isfile(join(default_directory, f))]
    files.sort()
    for file in files:
        if (file.endswith(".zip")):
            archive = zipfile.ZipFile(join(default_directory, file), 'r')
            jsonfile = archive.open(archive.namelist()[0])
            cve_dict = json.loads(jsonfile.read())
            jsonfile.close()
        else:
            continue
    try:
        cve_count = cve_dict['CVE_data_numberOfCVEs']
        print("total number of CVEs: {}".format(cve_count))
        y = z = j = 0
        current_dt = datetime.datetime.utcnow()
        duration = calc_time(current_dt)
        for x in range(0, int(cve_count)):
            try:
                cve_dt = json.dumps(cve_dict['CVE_Items'][x]['lastModifiedDate']).strip('"')
                dt_obj = datetime.datetime.strptime(cve_dt, '%Y-%m-%dT%H:%MZ')
                if ((current_dt - dt_obj) < duration):
                    try:
                        if (float(json.dumps(
                                cve_dict['CVE_Items'][x]['impact']['baseMetricV3']['cvssV3']['baseScore'])) > cve_score):

                            y += 1
                            slcdata = ':loud_sound:  *' + str(
                                json.dumps(cve_dict['CVE_Items'][x]['cve']['CVE_data_meta']['ID'])).strip('"') \
                                     + '*' + ' - Severity: ' + str(json.dumps(
                                cve_dict['CVE_Items'][x]['impact']['baseMetricV3']['cvssV3']['baseSeverity'])).strip(
                                '"') + '\r\n'

                            tgdata = '*' + str(
                                json.dumps(cve_dict['CVE_Items'][x]['cve']['CVE_data_meta']['ID'])).strip('"') \
                                     + '*' + ' - Severity: ' + str(json.dumps(
                                cve_dict['CVE_Items'][x]['impact']['baseMetricV3']['cvssV3']['baseSeverity'])).strip(
                                '"') \
                                     + '\r\n\r\n'

                            mstitle = str(json.dumps(cve_dict['CVE_Items'][x]['cve']['CVE_data_meta']['ID'])).strip('"') \
                                      + ' - ' + str(json.dumps(
                                cve_dict['CVE_Items'][x]['impact']['baseMetricV3']['cvssV3']['baseSeverity'])).strip(
                                '"')



                            try:
                                slcdata += '``` ' + str(json.dumps(
                                    cve_dict['CVE_Items'][x]['cve']['description']['description_data'][0][
                                        'value'])).strip('"') + \
                                          '```' + '\r\n' + str(json.dumps(
                                    cve_dict['CVE_Items'][x]['cve']['references']['reference_data'][0]['url'])).strip(
                                    '"') + '\r\n\r\n'

                                tgdata += '``` ' + str(json.dumps(
                                    cve_dict['CVE_Items'][x]['cve']['description']['description_data'][0][
                                        'value'])).strip('"') + \
                                          '```' + '\r\n' + str(json.dumps(
                                    cve_dict['CVE_Items'][x]['cve']['references']['reference_data'][0]['url'])).strip(
                                    '"')

                                mstext = str(json.dumps(
                                    cve_dict['CVE_Items'][x]['cve']['description']['description_data'][0][
                                        'value'])).strip('"')

                                mslink = str(json.dumps(
                                    cve_dict['CVE_Items'][x]['cve']['references']['reference_data'][0]['url'])).strip(
                                    '"')
                            except:
                                print("cve {} has no description/reference".format(x))
                                pass

                            time.sleep(1)
                            if args.slack:
                                slack_bot_sendtext(slcdata)
                            if args.telegram:
                                telegram_bot_sendtext(tgdata)
                            if args.msteams:
                                myTeamsMessage = pymsteams.connectorcard(teams_url)
                                myTeamsMessage.title(mstitle)
                                myTeamsMessage.text(mstext)
                                myTeamsMessage.addLinkButton("read more", mslink)
                                myTeamsMessage.send()


                    except:
                        try:
                            if (float(json.dumps(
                                    cve_dict['CVE_Items'][x]['impact']['baseMetricV2']['cvssV2']['baseScore'])) > cve_score):
                                # print (json.dumps(cve_dict['CVE_Items'][x], sort_keys=True, indent=4, separators=(',', ': ')))
                                z += 1
                                slcdata = ':loud_sound:  *' + str(
                                    json.dumps(cve_dict['CVE_Items'][x]['cve']['CVE_data_meta']['ID'])).strip(
                                    '"') \
                                         + '*' + ' - Severity: ' + str(json.dumps(
                                    cve_dict['CVE_Items'][x]['impact']['baseMetricV3']['cvssV2'][
                                        'baseSeverity'])).strip('"') + '\r\n'

                                tgdata = '*' + str(
                                    json.dumps(cve_dict['CVE_Items'][x]['cve']['CVE_data_meta']['ID'])).strip(
                                    '"') \
                                         + '*' + ' - Severity: ' + str(json.dumps(
                                    cve_dict['CVE_Items'][x]['impact']['baseMetricV3']['cvssV2'][
                                        'baseSeverity'])).strip('"') \
                                         + '\r\n\r\n'

                                mstitle = str(json.dumps(cve_dict['CVE_Items'][x]['cve']['CVE_data_meta']['ID'])).strip(
                                    '"') \
                                          + ' - ' + str(json.dumps(
                                    cve_dict['CVE_Items'][x]['impact']['baseMetricV3']['cvssV2'][
                                        'baseSeverity'])).strip('"')


                                try:
                                    slcdata += '```' + str(json.dumps(
                                        cve_dict['CVE_Items'][x]['cve']['description']['description_data'][0][
                                            'value'])).strip('"') \
                                              + '``` ' + '\r\n' + str(json.dumps(
                                        cve_dict['CVE_Items'][x]['cve']['references']['reference_data'][0][
                                            'url'])).strip('"') + '\r\n\r\n'

                                    tgdata += '```' + str(json.dumps(
                                        cve_dict['CVE_Items'][x]['cve']['description']['description_data'][0][
                                            'value'])).strip('"') \
                                              + '``` ' + '\r\n' + str(json.dumps(
                                        cve_dict['CVE_Items'][x]['cve']['references']['reference_data'][0][
                                            'url'])).strip('"')

                                    mstext = str(json.dumps(
                                        cve_dict['CVE_Items'][x]['cve']['description']['description_data'][0][
                                            'value'])).strip('"')

                                    mslink = str(json.dumps(
                                        cve_dict['CVE_Items'][x]['cve']['references']['reference_data'][0][
                                            'url'])).strip('"')

                                except:
                                    print("cve {} has no description/reference".format(x))
                                    pass

                                time.sleep(1)
                                if args.slack:
                                    slack_bot_sendtext(slcdata)
                                if args.telegram:
                                    telegram_bot_sendtext(tgdata)
                                if args.msteams:
                                    myTeamsMessage = pymsteams.connectorcard(teams_url)
                                    myTeamsMessage.title(mstitle)
                                    myTeamsMessage.text(mstext)
                                    myTeamsMessage.addLinkButton("read more", mslink)
                                    myTeamsMessage.send()

                            else:
                                continue
                        except:
                            # print("there is a cve without base score")
                            j += 1

                else:
                    continue

            except:
                pass

        print("in past {} time {} CVEs with CVSS base score > 7  and {} CVEs with no CVSS score found!".format(duration,
                                                                                                               + y, j))

        days = duration.days
        hours, remainder = divmod(duration.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        slcdata = ':robot_face:  in the past ' + str(days) + ' days ' + str(hours) + ' hours ' + str(
            minutes) + ' minutes, ' + str(z + y) + ' CVEs with CVSS base score > 7  and ' + str(j) + \
                 ' CVEs with no CVSS score found! - last updated at: ' + str(datetime.datetime.now())

        tgdata = 'in the past ' + str(days) + ' days ' + str(hours) + ' hours ' + str(minutes) + ' minutes, ' + str(
            z + y) + ' CVEs with CVSS base score > 7  and ' + str(j) + \
                 ' CVEs with no CVSS score found! - last updated at: ' + str(datetime.datetime.now())

        mstext = 'in the past ' + str(days) + ' days ' + str(hours) + ' hours ' + str(minutes) + ' minutes, ' + str(
            z + y) + ' CVEs with CVSS base score > 7  and ' + str(j) + \
                 ' CVEs with no CVSS score found! - last updated at: ' + str(datetime.datetime.now())

        if args.slack:
            slack_bot_sendtext(slcdata)
        if args.telegram:
            telegram_bot_sendtext(tgdata)
        if args.msteams:
            myTeamsMessage = pymsteams.connectorcard(teams_url)
            myTeamsMessage.color('red')
            myTeamsMessage.text(mstext)
            myTeamsMessage.send()

    except Exception as e:
        print("error analyzing files!")
        print(e)


# telegram bot
# get people chat id from https://api.telegram.org/bot1<tgtoken>/getUpdates
def telegram_bot_sendtext(bot_message):
    send_text = 'https://api.telegram.org/bot' + bot_token + '/sendMessage?chat_id=' + chat_id + '&parse_mode=Markdown&text=' + bot_message
    try:
        requests_retry_session(retries=10,
                                          backoff_factor=0.7,
                                          status_forcelist=(500, 502, 504),
                                          session=None, ).get(send_text)
    except Exception as x:
        print('failed to send data to telegram.')


# Slack Webhook
def slack_bot_sendtext(text):
    payload = {"text": "{0}".format(text)}
    try:
        json_data = json.dumps(payload)
        res = requests_retry_session(retries=10,
                                     backoff_factor=0.7,
                                     status_forcelist=(500, 502, 504),
                                     session=None, ).post(slack_url,
                                                          data=json_data.encode('ascii'),
                                                          headers={'Content-Type': 'application/json'})

    except Exception as x:
        print('failed to send data to slack.')


# save timestamp of script last running state
def save_timestamp():
    f = open(default_directory + "log_timestamp.txt", "a")
    f.write(str(datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M')) + '\n')
    f.close()


def main():
    new_hash, file = list_file()
    if (check_hash(new_hash)):
        print("getting updates...")
        download_file(file)
    else:
        print("no update fetched!")
    analyze_file()
    save_timestamp()


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", default='cve.conf', help="config file to use")
    parser.add_argument("--slack", action="store_true", help="send CVEs to slack channel")
    parser.add_argument("--telegram", action="store_true", help="send CVEs to telegram channel")
    parser.add_argument("--msteams", action="store_true", help="send CVEs to msteams channel")

    args = parser.parse_args()

    if not args.config:
        config_file = 'cve.conf'
    else:
        config_file = args.config

    if not (exists(config_file)):
        print("No config file found!")
        sys.exit(1)

    config = ConfigParser()
    config.read_file(open(config_file))

    default_directory = config.get('file', 'dir')
    cve_score = int(config.get('cve', 'score'))

    if args.slack:
        slack_url = config.get('slack', 'slack_url')
    if args.telegram:
        bot_token = config.get('telegram', 'bot_token')
        chat_id = config.get('telegram', 'chat_id')
    if args.msteams:
        teams_url = config.get('msteams', 'teams_url')
    if not (args.slack or args.telegram or args.msteams):
        print("please select slack , telegram or msteams for notifications")
        sys.exit(1)

    main()

